(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{445:function(v,_,e){"use strict";e.r(_);var t=e(43),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"词法环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#词法环境"}},[v._v("#")]),v._v(" "),e("center",[v._v("词法环境")])],1),v._v(" "),e("blockquote",[e("p",[v._v("ECMAScript规范中对词法环境的描述如下：词法环境是用来定义 基于词法嵌套结构的ECMAScript代码内的标识符与变量值和函数值之间的关联关系 的一种规范类型。一个词法环境由环境记录（Environment Record）和一个可能为null的对外部词法环境的引用（outer）组成。一般来说，词法环境都与特定的ECMAScript代码语法结构相关联，例如函数、代码块、TryCatch中的Catch从句，并且每次执行这类代码时都会创建新的词法环境")])]),v._v(" "),e("p",[v._v("简言之，"),e("strong",[v._v("词法环境")]),v._v("就是相应代码块内"),e("strong",[v._v("标识符与值的关联关系")]),v._v("的体现。")]),v._v(" "),e("p",[v._v("它由 "),e("strong",[v._v("环境记录（Environment Record）")]),v._v(" 和 "),e("strong",[v._v("对外部词法环境的引用（outer）")]),v._v(" 组成。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("环境记录（Environment Record）：记录相应代码块的标识符绑定。")])]),v._v(" "),e("li",[e("p",[v._v("对外部词法环境的引用（outer）：用于形成多个词法环境在逻辑上的嵌套结构，以实现可以访问外部词法环境变量的能力。")])])]),v._v(" "),e("h2",{attrs:{id:"环境记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环境记录"}},[v._v("#")]),v._v(" 环境记录")]),v._v(" "),e("p",[e("strong",[v._v("环境记录")]),v._v("大体分三类:")]),v._v(" "),e("ul",[e("li",[v._v("声明式环境记录（Declarative Environment Record）")]),v._v(" "),e("li",[v._v("对象式环境记录（Object Environment Record）")]),v._v(" "),e("li",[v._v("全局环境记录（Global Environment Record）")])]),v._v(" "),e("h3",{attrs:{id:"声明式环境记录（declarative-environment-record）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#声明式环境记录（declarative-environment-record）"}},[v._v("#")]),v._v(" 声明式环境记录（Declarative Environment Record）")]),v._v(" "),e("p",[e("strong",[v._v("声明式环境记录")]),v._v(" 是用来定义那些直接将标识符与语言值绑定的ES语法元素，例如变量，常量，"),e("code",[v._v("let，class，module，import")]),v._v("以及函数声明等。")]),v._v(" "),e("p",[v._v("声明式环境记录 又有两种特殊类型:")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("函数环境记录（Function Environment Record）")])]),v._v(" "),e("li",[e("p",[v._v("模块环境记录（Module Environment Record）")]),v._v(" "),e("p",[e("strong",[v._v("函数环境记录")]),v._v(" 用于体现一个函数的顶级作用域，如果函数不是箭头函数，还会提供一个this的绑定。")]),v._v(" "),e("p",[e("strong",[v._v("模块环境记录")]),v._v(" 用于体现一个模块的外部作用域（即模块export所在环境），除了正常绑定外，也提供了所有引入的其他模块的绑定（即import的所有模块，这些绑定只读），因此我们可以直接访问引入的模块。")])])]),v._v(" "),e("h3",{attrs:{id:"对象式环境记录（object-environment-record）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象式环境记录（object-environment-record）"}},[v._v("#")]),v._v(" 对象式环境记录（Object Environment Record）")]),v._v(" "),e("p",[v._v("每个对象式环境记录都与一个对象相关联，这个对象叫做对象式环境记录的 "),e("code",[v._v("binding object")]),v._v("。可以理解为对象式环境记录就是基于这个 "),e("code",[v._v("binding object")]),v._v("，以对象属性的形式进行标识符绑定，标识符与 "),e("code",[v._v("binding object")]),v._v(" 的属性名一一对应。")]),v._v(" "),e("p",[v._v("是对象就可以动态添加或者删除属性，所以对象环境记录不存在不可变绑定。")]),v._v(" "),e("p",[v._v("对象式环境记录用来定义那些将标识符与某些对象属性相绑定的ES语法元素，例如"),e("code",[v._v("with")]),v._v("语句、全局"),e("code",[v._v("var")]),v._v("声明和函数声明。")]),v._v(" "),e("h3",{attrs:{id:"全局环境记录（global-environment-record）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局环境记录（global-environment-record）"}},[v._v("#")]),v._v(" 全局环境记录（Global Environment Record）")]),v._v(" "),e("p",[v._v("全局环境记录逻辑上来说是单个记录，但是实际上可以看作是对一个对象式环境记录组件和一个声明式环境记录组件的封装。")]),v._v(" "),e("p",[v._v("之前说过每个对象式环境记录都有一个"),e("code",[v._v("binding object")]),v._v("，全局环境记录的对象式环境记录的"),e("code",[v._v("binding object")]),v._v("就是全局对象，在浏览器内，全局的"),e("code",[v._v("this")]),v._v("及"),e("code",[v._v("window")]),v._v("绑定都指向全局对象。")]),v._v(" "),e("p",[v._v("全局环境记录的对象式环境记录组件，绑定了所有内置全局属性、全局的函数声明以及全局的var声明。")]),v._v(" "),e("p",[v._v("所以这些绑定我们可以通过"),e("code",[v._v("window.xx")]),v._v("或"),e("code",[v._v("this.xx")]),v._v("获取到。")]),v._v(" "),e("p",[v._v("全局代码的其他声明（如"),e("code",[v._v("let、const、class")]),v._v("等）则绑定在声明式环境记录组件内，由于声明式环境记录组件并不是基于简单的对象形式来实现绑定，所以这些声明我们并"),e("code",[v._v("不能通过全局对象的属性来访问")]),v._v("。")]),v._v(" "),e("h2",{attrs:{id:"外部词法环境的引用（outer）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#外部词法环境的引用（outer）"}},[v._v("#")]),v._v(" 外部词法环境的引用（outer）")]),v._v(" "),e("p",[e("strong",[v._v("外部词法环境的引用")]),v._v(" 是将一个词法环境和其外部词法环境链接起来，外部词法环境又拥有对其自身的外部词法环境的引用。这样就形成一个链式结构，这里我们称其为"),e("strong",[v._v("环境链")]),v._v("（即ES6之前的作用域链），全局环境是这条链的顶端。")]),v._v(" "),e("p",[v._v("注意:")]),v._v(" "),e("ol",[e("li",[v._v("全局环境的外部词法环境引用为null")]),v._v(" "),e("li",[v._v("一个词法环境可以作为多个词法环境的外部环境。例如全局声明了多个函数，则这些函数词法环境的外部词法环境引用都指向全局环境。")])]),v._v(" "),e("p",[e("strong",[v._v("环境链")]),v._v("的存在是为了标识符的解析，通俗的说就是查找变量。首先在当前环境查找变量，找不到就去外部环境找，还找不到就去外部环境的外部环境找，以此类推，直到找到，或者到环境链顶端（全局环境）还未找到则抛出"),e("code",[v._v("ReferenceError")]),v._v("。")]),v._v(" "),e("p",[e("strong",[v._v("标识符解析")]),v._v("：在环境链中解析变量（绑定）的过程")]),v._v(" "),e("Valine")],1)}),[],!1,null,null,null);_.default=r.exports}}]);