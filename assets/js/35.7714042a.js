(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{451:function(e,t,v){"use strict";v.r(t);var a=v(43),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"vue常见面试题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue常见面试题"}},[e._v("#")]),e._v(" "),v("center",[e._v("vue常见面试题")])],1),e._v(" "),v("h4",{attrs:{id:"vue中的computed-和-watch-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue中的computed-和-watch-的区别"}},[e._v("#")]),e._v(" vue中的computed 和 watch 的区别")]),e._v(" "),v("ul",[v("li",[e._v("功能上：computed是计算属性，也就是依赖其它的属性计算所得出最后的值。watch是去监听一个值的变化，然后执行相对应的函数")]),e._v(" "),v("li",[e._v("使用上：computed中的函数必须要用return返回；watch的回调里面会传入监听属性的新旧值，通过这两个值可以做一些特定的操作，不是必须要用return")]),e._v(" "),v("li",[e._v("性能上：computed中的函数所依赖的属性没有发生变化，那么调用当前的函数的时候会从缓存中读取，而watch在每次监听的值发生变化的时候都会执行回调")]),e._v(" "),v("li",[e._v("场景上：computed：当一个属性受多个属性影响的时候，例子：购物车商品结算；watch：当一条数据影响多条数据的时候，例子：搜索框")])]),e._v(" "),v("h4",{attrs:{id:"v-if、v-show、v-html的原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#v-if、v-show、v-html的原理"}},[e._v("#")]),e._v(" v-if、v-show、v-html的原理")]),e._v(" "),v("ul",[v("li",[e._v("v-if会调用addIfCondition方法，生成vnode的时候会忽略对应节点，render的时候就不会渲染；")]),e._v(" "),v("li",[e._v("v-show会生成vnode，render的时候也会渲染成真实节点，只是在render过程中会在节点的属性中修改show属性值，也就是常说的display；")]),e._v(" "),v("li",[e._v("v-html会先移除节点下的所有节点，调用html方法，通过addProp添加innerHTML属性，归根结底还是设置innerHTML为v-html的值")])]),e._v(" "),v("h4",{attrs:{id:"mvvm："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#mvvm："}},[e._v("#")]),e._v(" MVVM：")]),e._v(" "),v("ul",[v("li",[e._v("M：数据模型（Model），简单的JS对象")]),e._v(" "),v("li",[e._v("VM：视图模型（ViewModel），连接Model与View")]),e._v(" "),v("li",[e._v("V：视图层（View），呈现给用户的DOM渲染界面")])]),e._v(" "),v("h4",{attrs:{id:"virtual-dom-虚拟dom"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom-虚拟dom"}},[e._v("#")]),e._v(" Virtual DOM(虚拟dom)")]),e._v(" "),v("ul",[v("li",[e._v("Vue会把用户写的代码中的 标签中的代码解析成 AST 语法树，再将处理后的 AST 生成相应的 render 函数，render 函数执行后会得到与模板代码对应的虚拟 DOM，最后通过虚拟 DOM 中新旧 vnode 节点的对比和更新，渲染得到最终的真实 DOM")]),e._v(" "),v("li",[e._v("用一个原生的 js 对象去描述 dom 节点的类。因为浏览器操作 dom 的成本是很高的，所以利用 vnode 生成虚拟 dom 比创建一个真实 dom 的代价要小很多。")]),e._v(" "),v("li",[e._v("虚拟 DOM 不会立马进行排版与重绘操作，频繁修改时虚拟DOM会合并修改，然后一次性比较并修改真实 DOM 中需要改的部分，只渲染局部，减少过多 DOM 节点排版与重绘的损耗")])]),e._v(" "),v("h4",{attrs:{id:"diff算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#diff算法"}},[e._v("#")]),e._v(" Diff算法")]),e._v(" "),v("ul",[v("li",[e._v("每次修改数据之后，生成一个新的虚拟dom，和旧的虚拟dom比较的算法")]),e._v(" "),v("li",[e._v("Diff算法比较的时候，只会在同层级进行，不会跨层级比较")]),e._v(" "),v("li",[e._v("Diff 算法是逐层进行比对，只有同层级的节点进行比对，因此时间的复杂度只有 O(n)")]),e._v(" "),v("li",[e._v("Vue2的核心Diff算法采用了双端比较的算法，同时从新旧children的两端开始进行比较，借助key值找到可复用的节点，再进行相关操作。相比React的Diff算法，同样情况下可以减少移动节点次数，减少不必要的性能损耗，更加的优雅。")]),e._v(" "),v("li",[e._v("Vue3在创建VNode时就确定其类型，以及在mount/patch的过程中采用位运算来判断一个VNode的类型，在这个基础之上再配合核心的Diff算法，使得性能上较Vue2.x有了提升。该算法中还运用了动态规划的思想求解最长递归子序列。")])]),e._v(" "),v("h4",{attrs:{id:"vue响应式原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue响应式原理"}},[e._v("#")]),e._v(" Vue响应式原理")]),e._v(" "),v("ul",[v("li",[e._v("通过Object.defineProperty()来劫持各个属性的setter和getter，在数据变动时发布消息给订阅者，触发相应的监听回调")]),e._v(" "),v("li",[e._v("提供三个模块\n"),v("ul",[v("li",[e._v("Observer：能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者.")]),e._v(" "),v("li",[e._v("Compile：对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数。")]),e._v(" "),v("li",[e._v("Watcher：链接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应的回调函数，从而更新试图。")])])]),e._v(" "),v("li",[e._v("3.0使用Proxy和Object.defineProperty对比\n"),v("ul",[v("li",[e._v("Object.defineProperty只能劫持对象已存在的属性，我们需要对每个对象的每个属性进行遍历，无法监控到数组下标的变化，无法响应新增属性")]),e._v(" "),v("li",[e._v("Proxy是对对象的监听而非属性，并返回一个新对象，能够相应数组变化，新增属性，但是ie11以下不兼容")]),e._v(" "),v("li",[e._v("Proxy只需要代理一次，对象内的值发生了改变就会被感知到，不再需要像以前为对象的每个值进行数据劫持，对象的新增，数组的下标设置0清空等情况都可以被感知到")]),e._v(" "),v("li",[e._v("Object.defineProperty解决对象新增的方法是提供 $set 方法，对于数组的感知通过重写了数组的push，shift等方法")])])])]),e._v(" "),v("h4",{attrs:{id:"vue的组件通信"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue的组件通信"}},[e._v("#")]),e._v(" Vue的组件通信")]),e._v(" "),v("ul",[v("li",[e._v("props 和 $emit")]),e._v(" "),v("li",[e._v("$children 和 $parent")]),e._v(" "),v("li",[e._v("EventBus")]),e._v(" "),v("li",[e._v("ref")]),e._v(" "),v("li",[e._v("Provide 和 Inject")]),e._v(" "),v("li",[e._v("vuex")])]),e._v(" "),v("h4",{attrs:{id:"生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[e._v("#")]),e._v(" 生命周期")]),e._v(" "),v("ul",[v("li",[e._v("beforeCreate：实例初始化之后，this指向创建实例，不能访问到data、computed、watch、method上订单方法和数据")]),e._v(" "),v("li",[e._v("created：实例创建完成，可访问data、computed、watch、method上的方法和数据，未挂载到DOM，不能访问到$el属性，$ref属性内容为空数组")]),e._v(" "),v("li",[e._v("beforeMount：在挂载开始之前被调用，beforeMount之前，会找到对应的template，并编译成render函数")]),e._v(" "),v("li",[e._v("mounted：实例挂载到DOM上，此时可以通过DOMAPi获取到DOM节点，$ref属性可以访问")]),e._v(" "),v("li",[e._v("beforeUpdate：响应式数据更新时调用，发生在虚拟DOM打补丁之前")]),e._v(" "),v("li",[e._v("updated：虚拟DOM重新渲染和打补丁之后调用，组件DOM已经更新，可执行依赖于DOM的操作")]),e._v(" "),v("li",[e._v("activated：keep-alive开启时调用")]),e._v(" "),v("li",[e._v("deactivated：keep-alive关闭时调用")]),e._v(" "),v("li",[e._v("beforeDestroy：实例销毁之前调用。实例仍然完全可用，this仍能获取到实例")]),e._v(" "),v("li",[e._v("destroyed：实例销毁后调用，调用后，Vue实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁")])]),e._v(" "),v("h4",{attrs:{id:"vue组件中data必须是一个函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue组件中data必须是一个函数"}},[e._v("#")]),e._v(" Vue组件中data必须是一个函数")]),e._v(" "),v("ul",[v("li",[e._v("当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。")])]),e._v(" "),v("h4",{attrs:{id:"vue-runtime-js-vue-js"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-runtime-js-vue-js"}},[e._v("#")]),e._v(" vue.runtime.js/vue.js")]),e._v(" "),v("ul",[v("li",[e._v("vue.js同时包含编译器和运行时的版本。")]),e._v(" "),v("li",[e._v("runtime是运行时版本，只包含用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。")]),e._v(" "),v("li",[e._v("编译器就是用来将模板字符串"),v("code",[e._v("<template></template>")]),e._v("编译成为渲染函数")])]),e._v(" "),v("h4",{attrs:{id:"nexttick："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#nexttick："}},[e._v("#")]),e._v(" $nextTick：")]),e._v(" "),v("ul",[v("li",[e._v("在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。")]),e._v(" "),v("li",[e._v("Vue 异步执行 DOM 更新。只要观察到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据改变。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作上非常重要。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。")]),e._v(" "),v("li",[e._v("Vue在2.4版本、2.5版本和2.6版本中对于nextTick进行反复变动，原因是浏览器对于微任务的不兼容性影响、微任务和宏任务各自优缺点的权衡")]),e._v(" "),v("li",[e._v("降级选择使用 Promise -> MutationObserver -> setImmediate -> setTimeout 方法")])]),e._v(" "),v("h4",{attrs:{id:"vue-js-整个实现原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-js-整个实现原理"}},[e._v("#")]),e._v(" Vue.js 整个实现原理")]),e._v(" "),v("ul",[v("li",[e._v("new Vue()之后，在init过程会初始化生命周期，事件中心，渲染、执行beforeCreate、初始化data、props、computed、watcher、执行created，然后调用$mount方法对Vue实例进行挂载")]),e._v(" "),v("li",[e._v("挂载的核心过程包括模板编译、渲染以及更新三个过程")]),e._v(" "),v("li",[e._v("如果是template则先将template编译为render function，否则直接调用$mount的mountComponent方法，先执行beforeMount，然后实例化一个渲染Watcher，在它的回调函数中调用updateComponent方法")]),e._v(" "),v("li",[e._v("然后调用render方法将render function渲染成虚拟Dom")]),e._v(" "),v("li",[e._v("接着调用update方法，update方法又会调用pacth方法把虚拟 DOM 转换成真正的 DOM 节点，在pacth转换时如果没有旧的虚拟DOM，则直接生成真实DOM，如果有则需要经过Diff算法比较新旧虚拟DOM，然后修改真实DOM")])]),e._v(" "),v("h4",{attrs:{id:"computed和watch的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#computed和watch的区别"}},[e._v("#")]),e._v(" computed和watch的区别")]),e._v(" "),v("ul",[v("li",[e._v("computed：计算属性，根据依赖的值返回一个值，有缓存机制，除非依赖的响应式属性变化才会重新计算，不能接受参数，可以依赖其他computed，甚至是其他组件的data，不能与data中的属性重复")]),e._v(" "),v("li",[e._v("watch：一个对象，键是需要观察的值，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。可接受两个参数（当前值和旧值），监听数据改变时会触发回调，监听的属性必须是存在的，允许异步，不返回值")])]),e._v(" "),v("h4",{attrs:{id:"模版编译原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模版编译原理"}},[e._v("#")]),e._v(" 模版编译原理")]),e._v(" "),v("ul",[v("li",[e._v("首先解析模版，生成AST语法树(一种用JavaScript对象的形式来描述整个模板)。 使用大量的正则表达式对模板进行解析，遇到标签、文本的时候都会执行对应的钩子进行相关处理。")]),e._v(" "),v("li",[e._v("Vue的数据是响应式的，但其实模板中并不是所有的数据都是响应式的。有一些数据首次渲染后就不会再变化，对应的DOM也不会变化。那么优化过程就是深度遍历AST树，按照相关条件对树节点进行标记。这些被标记的节点(静态节点)我们就可以跳过对它们的比对，对运行时的模板起到很大的优化作用。")]),e._v(" "),v("li",[e._v("最后将优化后的AST树转换为可执行的代码。")])]),e._v(" "),v("h4",{attrs:{id:"keep-alive"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[e._v("#")]),e._v(" keep-alive")]),e._v(" "),v("ul",[v("li",[e._v("实现组件缓存，当组件切换时不会对当前组件进行卸载")]),e._v(" "),v("li",[e._v("添加了两个生命周期activated/deactivated，用来得知当前组件是否处于活跃状态")]),e._v(" "),v("li",[e._v("初次加载时会经过beforeCreate，created，beforeMount，mounted，在再次加载时不会触发这些生命周期，因为不会被卸载，所以也不会触发beforeDestroy和destroyed")])]),e._v(" "),v("h4",{attrs:{id:"当vue的列表没有设置key和不设置key"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#当vue的列表没有设置key和不设置key"}},[e._v("#")]),e._v(" 当vue的列表没有设置key和不设置key")]),e._v(" "),v("ul",[v("li",[e._v("不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法")]),e._v(" "),v("li",[e._v("而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。")]),e._v(" "),v("li",[e._v("当 key 未绑定时，主要通过元素的标签等进行判断是否为同一节点")]),e._v(" "),v("li",[e._v("如果 VNode 中只包含了文本节点，在 patchVnode 中可以直接替换文本节点，而不需要移动节点的位置，确实在不绑定 key 的情况下效率要高一丢丢。")]),e._v(" "),v("li",[e._v("在实际项目中，大多数情况下 v-for 的节点内并不只有文本节点，那么 VNode 的字节点就要进行销毁和创建的操作。")])]),e._v(" "),v("h4",{attrs:{id:"为什么说vue-的响应式更新比-react快"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么说vue-的响应式更新比-react快"}},[e._v("#")]),e._v(" 为什么说Vue 的响应式更新比 React快")]),e._v(" "),v("ul",[v("li",[e._v("Vue\n"),v("ul",[v("li",[e._v("Vue 对于响应式属性的更新，只会精确更新依赖收集的当前组件，而不会递归的去更新子组件")]),e._v(" "),v("li",[e._v("每个组件都有自己的渲染 watcher，它掌管了当前组件的视图更新，但是并不会掌管 ChildComponent 的更新。")]),e._v(" "),v("li",[e._v("响应式元素在传给子组件的时候，会被保存在子组件实例的 _props 上，并且被定义成了响应式属性，而子组件的模板中对于 props.msg 的访问其实是被代理到 _props.msg 上去的，所以自然也能精确的收集到依赖，父组件发生重渲染的时候，是会重新计算子组件的 props 的")]),e._v(" "),v("li",[e._v("使用slot时，收集到的是父组件的渲染watcher，当遇到slot是会直接调用slot组件vm实例上的 $forceUpdate，所触发的渲染watcher就是属于slot的渲染watcher，触发了两层渲染，父组件和slot的")])])]),e._v(" "),v("li",[e._v("React\n"),v("ul",[v("li",[e._v("React 是自顶向下的进行递归更新的，也就是说，React 中假如 ChildComponent 里还有十层嵌套子元素，那么所有层次都会递归的重新render（在不进行手动优化的情况下），这是性能上的灾难。（因此，React 创造了Fiber，创造了异步渲染）。")]),e._v(" "),v("li",[e._v("遵从Immutable的设计思想，永远不在原对象上修改属性，永远返回一个新的对象，无法知道修改了旧对象的哪部分")])])])]),e._v(" "),v("h4",{attrs:{id:"vue-router"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-router"}},[e._v("#")]),e._v(" Vue-Router")]),e._v(" "),v("h5",{attrs:{id:"模式和原理："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模式和原理："}},[e._v("#")]),e._v(" 模式和原理：")]),e._v(" "),v("ul",[v("li",[e._v("hash路由，使用 URL 的 hash 来模拟一个完整的 URL，无需后端路由映射，使用window.onhashchange监听url变化")]),e._v(" "),v("li",[e._v('history路由，基于history模式，需要后端路由映射，否则在内页刷新页面会404，使用Html5中新增的window.addEventListener("popstate",function(){})监听url变化，使用pushState/replaceState来改变url')])]),e._v(" "),v("h5",{attrs:{id:"路由钩子：用来做鉴权路由拦截"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#路由钩子：用来做鉴权路由拦截"}},[e._v("#")]),e._v(" 路由钩子：用来做鉴权路由拦截")]),e._v(" "),v("ul",[v("li",[e._v("全局：beforeEach，beforeResolve，afterEach")]),e._v(" "),v("li",[e._v("独享：单个路由的beforeEnter，beforeLeave")]),e._v(" "),v("li",[e._v("路由组件：beforeRouteEnter，beforeRouteUpdate，beforeRouteLeave")])]),e._v(" "),v("h5",{attrs:{id:"路由懒加载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#路由懒加载"}},[e._v("#")]),e._v(" 路由懒加载")]),e._v(" "),v("ul",[v("li",[e._v("路由定义处引入的组建使用Dynamic imports："),v("code",[e._v("()=>import('comp')")])])]),e._v(" "),v("h4",{attrs:{id:"vuex"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[e._v("#")]),e._v(" Vuex")]),e._v(" "),v("h5",{attrs:{id:"配置项"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#配置项"}},[e._v("#")]),e._v(" 配置项")]),e._v(" "),v("ul",[v("li",[e._v("Strict: 严格模式，所有的state修改都要通过Mutation")]),e._v(" "),v("li",[e._v("State：应用的状态数据")]),e._v(" "),v("li",[e._v("Getter：类似计算属性")]),e._v(" "),v("li",[e._v("Mutation：是唯一更改 store 中状态的方法，且必须是同步函数")]),e._v(" "),v("li",[e._v("Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作")]),e._v(" "),v("li",[e._v("Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中\n"),v("ul",[v("li",[e._v("默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的")]),e._v(" "),v("li",[e._v("如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名")])])]),e._v(" "),v("li",[e._v("Plugins：插件")])])])}),[],!1,null,null,null);t.default=r.exports}}]);