(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{457:function(t,v,a){"use strict";a.r(v);var _=a(43),r=Object(_.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"进程与线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程与线程"}},[t._v("#")]),t._v(" "),a("center",[t._v("进程与线程")])],1),t._v(" "),a("p",[a("strong",[t._v("Chrome浏览器使用多个进程来隔离不同的网页，在Chrome中打开一个网页相当于起了一个进程，每个tab网页都有由其独立的渲染进程实例")]),t._v("。因为如果非多进程的话，如果浏览器中的一个tab网页崩溃，将会导致其他被打开的网页应用。另外相对于线程，进程之间是不共享资源和地址空间的，所以不会存在太多的安全问题，而由于多个线程共享着相同的地址空间和资源，所以会存在线程之间有可能会恶意修改或者获取非授权数据等复杂的安全问题。")]),t._v(" "),a("p",[t._v("一个浏览器通常有以下几个进程组成:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Browser进程：浏览器的主进程（负责协调、主控），只有一个。作用有")]),t._v(" "),a("ul",[a("li",[t._v("负责浏览器界面显示，与用户交互。如前进，后退等")]),t._v(" "),a("li",[t._v("负责各个页面的管理，创建和销毁其他进程")]),t._v(" "),a("li",[t._v("将Renderer进程得到的内存中的Bitmap，绘制到用户界面上")]),t._v(" "),a("li",[t._v("网络资源的管理，下载等")])])]),t._v(" "),a("li",[a("p",[t._v("第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建")])]),t._v(" "),a("li",[a("p",[t._v("GPU进程：最多一个，用于3D绘制等")])]),t._v(" "),a("li",[a("p",[t._v("浏览器渲染进程（浏览器内核）（Renderer进程，内部是多线程的）：默认每个Tab页面一个进程，互不影响。主要作用为")]),t._v(" "),a("ul",[a("li",[t._v("页面渲染，脚本执行，事件处理等")])])])]),t._v(" "),a("h2",{attrs:{id:"渲染进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程"}},[t._v("#")]),t._v(" 渲染进程")]),t._v(" "),a("p",[t._v("在内核控制下各线程相互配合以保持同步，一个浏览器的渲染进程通常由以下常驻线程组成：")]),t._v(" "),a("h3",{attrs:{id:"gui-渲染线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gui-渲染线程"}},[t._v("#")]),t._v(" GUI 渲染线程")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("负责渲染浏览器界面，解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等。")])]),t._v(" "),a("li",[a("p",[t._v("当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行")])]),t._v(" "),a("li",[a("p",[t._v("注意，GUI渲染线程与JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。")])])]),t._v(" "),a("h3",{attrs:{id:"javascript引擎线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript引擎线程"}},[t._v("#")]),t._v(" JavaScript引擎线程")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("也称为JS内核，负责处理Javascript脚本程序。（例如V8引擎）")])]),t._v(" "),a("li",[a("p",[t._v("JS引擎线程负责解析Javascript脚本，运行代码。")])]),t._v(" "),a("li",[a("p",[t._v("JS引擎一直等待着任务队列中任务的到来，然后加以处理，一个Tab页（renderer进程）中无论什么时候都只有一个JS线程在运行JS程序")])]),t._v(" "),a("li",[a("p",[t._v("同样注意，GUI渲染线程与JS引擎线程是互斥的，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。")])])]),t._v(" "),a("h3",{attrs:{id:"定时触发器线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时触发器线程"}},[t._v("#")]),t._v(" 定时触发器线程")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("传说中的setInterval与setTimeout所在线程")])]),t._v(" "),a("li",[a("p",[t._v("浏览器定时计数器并不是由JavaScript引擎计数的,（因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）")])]),t._v(" "),a("li",[a("p",[t._v("因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待JS引擎空闲后执行）")])]),t._v(" "),a("li",[a("p",[t._v("注意，W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms。")])])]),t._v(" "),a("h3",{attrs:{id:"事件触发线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件触发线程"}},[t._v("#")]),t._v(" 事件触发线程")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("归属于浏览器而不是JS引擎，用来控制事件循环（可以理解，JS引擎自己都忙不过来，需要浏览器另开线程协助）")])]),t._v(" "),a("li",[a("p",[t._v("当JS引擎执行代码块如setTimeOut时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件线程中")])]),t._v(" "),a("li",[a("p",[t._v("当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理")])]),t._v(" "),a("li",[a("p",[t._v("注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）")])])]),t._v(" "),a("h3",{attrs:{id:"异步http请求线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步http请求线程"}},[t._v("#")]),t._v(" 异步http请求线程")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在XMLHttpRequest在连接后是通过浏览器新开一个线程请求")])]),t._v(" "),a("li",[a("p",[t._v("将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由JavaScript引擎执行。")])])]),t._v(" "),a("h2",{attrs:{id:"浏览器线程间的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器线程间的关系"}},[t._v("#")]),t._v(" 浏览器线程间的关系")]),t._v(" "),a("h3",{attrs:{id:"gui渲染线程与js引擎线程互斥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gui渲染线程与js引擎线程互斥"}},[t._v("#")]),t._v(" GUI渲染线程与JS引擎线程互斥")]),t._v(" "),a("p",[t._v("由于JavaScript是可操纵DOM的，如果在修改这些元素属性同时渲染界面（即JS线程和UI线程同时运行），那么渲染线程前后获得的元素数据就可能不一致了。")]),t._v(" "),a("p",[t._v("因此为了防止渲染出现不可预期的结果，浏览器设置GUI渲染线程与JS引擎为互斥的关系，当JS引擎执行时GUI线程会被挂起，")]),t._v(" "),a("p",[t._v("GUI更新则会被保存在一个队列中等到JS引擎线程空闲时立即被执行。")]),t._v(" "),a("h3",{attrs:{id:"js阻塞页面加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js阻塞页面加载"}},[t._v("#")]),t._v(" JS阻塞页面加载")]),t._v(" "),a("p",[t._v("从上述的互斥关系，可以推导出，JS如果执行时间过长就会阻塞页面。")]),t._v(" "),a("p",[t._v("譬如，假设JS引擎正在进行巨量的计算，此时就算GUI有更新，也会被保存到队列中，等待JS引擎空闲后执行。\n然后，由于巨量计算，所以JS引擎很可能很久很久后才能空闲，自然会感觉到巨卡无比。")]),t._v(" "),a("p",[t._v("所以，要尽量避免JS执行时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。")]),t._v(" "),a("Valine")],1)}),[],!1,null,null,null);v.default=r.exports}}]);