(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{475:function(t,s,a){"use strict";a.r(s);var e=a(43),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"http常见面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http常见面试题"}},[t._v("#")]),t._v(" "),a("center",[t._v(" HTTP常见面试题 ")])],1),t._v(" "),a("h4",{attrs:{id:"get和post区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get和post区别"}},[t._v("#")]),t._v(" get和post区别")]),t._v(" "),a("ul",[a("li",[t._v("get在浏览器回退时时无害的，而post会再次提交请求")]),t._v(" "),a("li",[t._v("get请求会被浏览器主动缓存，而post不会")]),t._v(" "),a("li",[t._v("get产生一个tcp数据包，post会产生两个tcp包(一次header，一次body)")]),t._v(" "),a("li",[t._v("get参数通过URL传递，post放在Requset Body中")])]),t._v(" "),a("h4",{attrs:{id:"状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态码"}},[t._v("#")]),t._v(" 状态码")]),t._v(" "),a("ul",[a("li",[t._v("200 OK：客户端请求成功")]),t._v(" "),a("li",[t._v("301 Moved Permanently：所请求的页面已经转移至新的URL，永久重定向")]),t._v(" "),a("li",[t._v("302 Found：所请求的页面已经临时转移至新的URL，临时重定向")]),t._v(" "),a("li",[t._v("304 Not Modified：协商缓存")]),t._v(" "),a("li",[t._v("401 Unauthorized：表示缺失或错误的认证")]),t._v(" "),a("li",[t._v("403 Forbidden：当用户被认证后，但是没有被授权在特定资源上执行操作")]),t._v(" "),a("li",[t._v("404 Not Found：请求资源不存在")]),t._v(" "),a("li",[t._v("500 Internal Server Error：服务器发生不可预期的错误原来缓冲的文档还可以继续使用")]),t._v(" "),a("li",[t._v("503 Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可恢复正常")])]),t._v(" "),a("h4",{attrs:{id:"keep-alive："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive："}},[t._v("#")]),t._v(" keep-alive：")]),t._v(" "),a("ul",[a("li",[t._v("HTTP协议采用请求-应答模式，当使用既非Keep-Alive模式时，每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接，当使用keep-alive 时，使客户端到服务器端的链接持续有效，当出现对服务器的后续请求时，避免了建立或者重新建立连接")]),t._v(" "),a("li",[t._v("keep-alive是1.1版本才有")])]),t._v(" "),a("h4",{attrs:{id:"option"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#option"}},[t._v("#")]),t._v(" option")]),t._v(" "),a("ul",[a("li",[t._v("CORS跨域请求时，客户端会先发起一个option方法的预检请求，来知道服务端是否允许跨域请求。")])]),t._v(" "),a("h4",{attrs:{id:"cookie-session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-session"}},[t._v("#")]),t._v(" Cookie/Session")]),t._v(" "),a("ul",[a("li",[t._v("因为http是无状态请求，每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，所以服务器与浏览器为了进行会话跟踪，就必须主动的去维护一个状态，这个状态用于告知服务端前后两个请求是否来自同一浏览器。而这个状态需要通过 Cookie 或者 Session 去实现。")]),t._v(" "),a("li",[t._v("Cookie存储在客户端，大小最多4k，可以设置过期时间")]),t._v(" "),a("li",[t._v("Session是基于 Cookie 实现的，SessionID 会被存储到客户端的 Cookie 中，保存在服务器端，所以理论上可以很大，一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。")]),t._v(" "),a("li",[t._v("Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。")]),t._v(" "),a("li",[t._v("Cookie使用注意点\n"),a("ul",[a("li",[t._v("value：如果作用于登录状态，需要加密。")]),t._v(" "),a("li",[t._v("http-only：不能通过JavaScript访问到Cookie，防止XSS攻击。")]),t._v(" "),a("li",[t._v("same-site：不能在跨域请求中携带Cookie，防止CSRF攻击。")])])]),t._v(" "),a("li",[t._v("SessionID 是连接 Cookie 和 Session 的一道桥梁，大部分系统也是根据此原理来验证用户登录状态。")])]),t._v(" "),a("h4",{attrs:{id:"缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),a("ul",[a("li",[t._v("强缓存：\n"),a("ul",[a("li",[t._v("通过设置Expires和Cache-Control实现。强缓存表示在缓存期间不需要发起请求，状态码为200")]),t._v(" "),a("li",[t._v("Expires是HTTP/1的产物，值为缓存的过期时间")]),t._v(" "),a("li",[t._v("Cache-control出现于HTTP/1.1，优先级比Expires高")])])]),t._v(" "),a("li",[t._v("协商缓存\n"),a("ul",[a("li",[t._v("通过设置Last-Modified和ETag实现。如果缓存过期了，就需要发起请求验证资源是否有更新。如果发起请求验证资源没有改变，返回状态304，并且更新浏览器缓存的有效期。")]),t._v(" "),a("li",[t._v("Last-Modified和If-Modified-Since：Last-Modified表示本地文件最后修改日期，If-Modified-Since会将Last-Modified的值发送给服务器，询问该日期之后的资源是否有更新，有就将新资源发送来，没有返回304状态码")]),t._v(" "),a("li",[t._v("ETag和If-None-Match：ETag出现于HTTP/1.1，他的优先级比Last-Modified高。ETag类似于文件的指纹，If-None-Match会将ETag发送给服务器，询问该ETag是否变动，有变动的话就将获取新的资源")]),t._v(" "),a("li",[t._v('Nginx 官方默认的 ETag 计算方式是为"文件最后修改时间16进制-文件长度16进制"。')]),t._v(" "),a("li",[t._v("Express 框架使用了 serve-static 中间件来配置缓存方案，使用了一个叫 etag 的 npm 包来实现 etag 计算\n"),a("ul",[a("li",[t._v("使用文件大小和修改时间")]),t._v(" "),a("li",[t._v("使用文件内容的hash值和内容长度")])])])])]),t._v(" "),a("li",[t._v("F5与Ctrl+F5的区别\n"),a("ul",[a("li",[t._v("F5：跳过强缓存，但会检查协商缓存")]),t._v(" "),a("li",[t._v("Ctrl+F5：直接从服务器加载，跳过强缓存和协商缓存")])])])]),t._v(" "),a("h4",{attrs:{id:"安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[t._v("#")]),t._v(" 安全")]),t._v(" "),a("ul",[a("li",[t._v("XSS：攻击者通过页面注入可执行的代码的攻击方式，防御方法：\n"),a("ul",[a("li",[t._v("将用户输入的内容，进行转义，过滤标签和标签属性")]),t._v(" "),a("li",[t._v("使用CSP告诉浏览器限制外部资源可以加载和执行，开启CSP有两种方式：\n"),a("ul",[a("li",[t._v("设置HTTP-Header中的Content-sesurity-Policy")]),t._v(" "),a("li",[t._v("设置标签的方式")])])])])]),t._v(" "),a("li",[t._v("CSRF：跨站请求伪造，如获取cookie伪造用户登陆状态，防御方法\n"),a("ul",[a("li",[t._v("设置cookie的SameSite")]),t._v(" "),a("li",[t._v("验证Referer")]),t._v(" "),a("li",[t._v("登陆后服务器下发一个随机token，之后的请求带上")])])])]),t._v(" "),a("h4",{attrs:{id:"三次握手：三次是最小的安全次数，为了让客户端和服务端都能确定彼此发起和响应的能力是否靠谱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三次握手：三次是最小的安全次数，为了让客户端和服务端都能确定彼此发起和响应的能力是否靠谱"}},[t._v("#")]),t._v(" 三次握手：三次是最小的安全次数，为了让客户端和服务端都能确定彼此发起和响应的能力是否靠谱")]),t._v(" "),a("ul",[a("li",[t._v("客户端发送SYN包")]),t._v(" "),a("li",[t._v("服务端接收到SYN包之后将SYN+ACK包发送给客户端")]),t._v(" "),a("li",[t._v("客户端接收到SYN+ACK包之后，向服务器发送确认包ACK")]),t._v(" "),a("li",[t._v("服务端接收到之后连接成功，开始传输数据")])]),t._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[a("p",[t._v("四次挥手：关闭连接是双向的，客户端和服务器都可以提出，四次挥手是为了不让关闭太仓促，保证可靠性")]),t._v(" "),a("ul",[a("li",[t._v("客户端发送一个FIN，用来关闭客户到服务器的数据传送。")]),t._v(" "),a("li",[t._v("服务器收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。")]),t._v(" "),a("li",[t._v("服务器关闭客户端的连接，发送一个FIN给客户端。")]),t._v(" "),a("li",[t._v("客户端发回ACK报文确认，并将确认序号设置为收到序号加1。")])])])]),t._v(" "),a("h4",{attrs:{id:"https："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https："}},[t._v("#")]),t._v(" https：")]),t._v(" "),a("ul",[a("li",[t._v("使用传输层安全性(TLS)或安全套接字层(SSL)对通信协议进行加密。也就是 HTTP + SSL(TLS) = HTTPS")]),t._v(" "),a("li",[t._v("TLS 是使用对称加密和非对称加密 的混合加密方式来实现机密性。")]),t._v(" "),a("li",[t._v("在通信刚开始的时候使用非对称算法，比如 RSA、ECDHE ，首先解决密钥交换的问题。然后用随机数产生对称算法使用的会话密钥（session key），再用公钥加密。对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换。")]),t._v(" "),a("li",[t._v("使用数字证书验证发送者是客户端还是中间人攻击")])]),t._v(" "),a("h4",{attrs:{id:"tsl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tsl"}},[t._v("#")]),t._v(" TSL")]),t._v(" "),a("ul",[a("li",[t._v("客户端请求服务端建立SSL链接，服务端并向客户端发送一个随机数 randomC 和 CA 机构颁发的证书")]),t._v(" "),a("li",[t._v("客户端对证书进行验证，验证通过后，生成一个随机数 randomS ，用公钥对 randomS 加密 ，同时用 randomS 生成一段签名，发送给服务端")]),t._v(" "),a("li",[t._v("服务端接收到后，用私钥对秘文解密，用解密后的 key 生成签名，并与客户端传来的签名进行比较，检验通过后，然后生成一个随机数 randomP ，并用私钥加密，还有随机数生成的 hash 值，一并发给客户端。")]),t._v(" "),a("li",[t._v("客户端用公钥解密，并校验 hash 值通过后，两端利用 randomC randomS randomP 通过一定的算法生成 session key，后续的报文将通过 session key 对称加密进行传输。")])]),t._v(" "),a("h4",{attrs:{id:"ca-证书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ca-证书"}},[t._v("#")]),t._v(" CA 证书")]),t._v(" "),a("ul",[a("li",[t._v("CA证书，是由 CA 机构颁发的一个凭证，里面关键的信息有，签名算法、签名hash算法、颁发者、有效期、公钥、指纹，这个两个算法就表示对称阶段和非对称阶段采用的算法，公钥就是服务端的公钥，在申请的时候，企业需要上传公钥给CA机构，重点是这个指纹，这个指纹是由 CA 机构通过私钥对一段签名加密生成的。")]),t._v(" "),a("li",[t._v("在浏览器和个人PC中，都预装了顶级的 CA 机构证书和公钥，所以浏览器获取到证书后，通过内置的公钥对指纹进行解密得到签名，然后浏览器也根据同样的规则生成一段签名，两段签名进行比较，验证通过，那么这个证书中公钥就是可信的。")])]),t._v(" "),a("h4",{attrs:{id:"http-http2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-http2"}},[t._v("#")]),t._v(" http/http2")]),t._v(" "),a("ul",[a("li",[t._v("http1.1以文本的方式，http2是一个二进制协议，使用二进制帧传输，增加了数据传输的效率")]),t._v(" "),a("li",[t._v("http2可以在一个TCP链接中并发请求多个HTTP请求，移除了HTTP/1.1中的串行请求。")]),t._v(" "),a("li",[t._v("HTTP2采用HPACK压缩算法压缩头部，减小了传输的体积")]),t._v(" "),a("li",[t._v("HTTP2支持服务端推送")])]),t._v(" "),a("h4",{attrs:{id:"jwt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jwt"}},[t._v("#")]),t._v(" JWT")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("JSON Web Token（简称 JWT）是目前最流行的跨域认证解决方案。")])]),t._v(" "),a("li",[a("p",[t._v("JWT 由三部分组成:Header，Payload，Signature 三个部分组成，并且最后由.拼接而成")])]),t._v(" "),a("li",[a("p",[t._v("Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子，最后将 JSON 对象使用 Base64URL 算法转成字符串")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"alg"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HS256"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示签名的算法，默认是 HMAC SHA256（写成 HS256）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"typ"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JWT"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示这个令牌（token）的类型")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Payload 中由 Registered Claim 以及需要通信的数据组成。它也是 JSON 格式，另外这些数据字段也叫 Claim。JWT 规定了7个官方字段如下，除了官方的字段外你也可以自定义一些字段，最后将 JSON 对象使用 Base64URL 算法转成字符串")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iss")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("issuer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：签发人\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expiration time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：过期时间\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：主题\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("aud")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("audience"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：受众\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nbf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Not Before"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：生效时间\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Issued At"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：签发时间 jwt 创建时间\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("jti")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JWT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("：编号\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Signature 部分是对前两部分的签名，防止数据篡改。首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由 HMACSHA256 算法进行签名，secret 不能外泄")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" sign "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HMACSHA256")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("base64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("header"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" base64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("payload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" secret"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// jwt 由三部分拼接而成")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" jwt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" base64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("header"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" base64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("payload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sign\n")])])])]),t._v(" "),a("li",[a("p",[t._v("一旦发布，在令牌过期之前是不能被取消的")])])]),t._v(" "),a("h4",{attrs:{id:"tcp-ip四层模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip四层模型"}},[t._v("#")]),t._v(" TCP/IP四层模型")]),t._v(" "),a("ul",[a("li",[t._v("数据链路层：用来处理连接网络的硬件部分")]),t._v(" "),a("li",[t._v("网络层：用来处理在网络上流动的数据包")]),t._v(" "),a("li",[t._v("传输层：对上层应用层提供处于网络连接中的两台计算机之间的数据传输，有两个不同性质的协议TCP/UDP")]),t._v(" "),a("li",[t._v("应用层：决定了向用户提供应用服务时通信的活动，FTP/DNS/HTTP存在于该层")])]),t._v(" "),a("h4",{attrs:{id:"一个-tcp-连接能发几个-http-请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个-tcp-连接能发几个-http-请求"}},[t._v("#")]),t._v(" 一个 tcp 连接能发几个 http 请求")]),t._v(" "),a("ul",[a("li",[t._v("HTTP 1.0 版本协议，一般情况下，不支持长连接，因此在每次请求发送完毕之后，TCP 连接即会断开，因此一个 TCP 发送一个 HTTP 请求。")]),t._v(" "),a("li",[t._v("HTTP 1.1 版本协议，默认连接都是长连接（想断开则指定 Connection 为 close），因此只要 TCP 连接不断开，便可以一直发送 HTTP 请求，持续不断，没有上限")]),t._v(" "),a("li",[t._v("HTTP 2.0 版本协议，支持多路复用，一个 TCP 连接是可以并发多个 HTTP 请求的，同样也是支持长连接，因此只要不断开 TCP 的连接，HTTP 请求数也是可以没有上限地持续发送。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);